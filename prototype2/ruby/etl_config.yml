# This file contains the configuration for an ETL process. 
# It is divided into various sections. The *globals* and *root* sections are mandatory

# The *globals* section contains global configuration options for the whole ETL
globals:
    # Enables or disables savepoints
    
    :savepoint: true
    
    # Defines if savepoints work in dump-mode (i.e. do not remove previous ones when creating a new savepoint)
    # This may be useful for debugging purposes
    
    :savepointdump: true
    
    # Defines where savepoints will be stored. If omitted, the current execution directory will be used.
    
    #:saveloc: .
    
    # Defines an initial step for the ETL process. Use this option to restart an ETL from 
    # a middle point in execution (for example, to restore after a crash)
    # The stepname is the name of the first block to run. If a block hasn't an explicit name
    # the implicit can be used (or you can assign an explicit name to the block!)
    
    #:initialstep: stepname
    
    # Defines the savepoint-generated file to be used to restore the ETL status. This works in
    # conjunction with the previous option. 
    # The file (which is relative to the location defined by the :saveloc option), MUST contain
    # a valid ETLDto object serialized in JSON format.
    
    #:recover: 317_1188338246_2.dto

# The *root* section contains the primary definition of the ETL process and defines its three
# basic chains. The *root* sections is a chain itself, so you can configure it in the same ways as
# the others.
#
# The blocks which compose a chain must be declared according to this rules:
# * the sequence of blocks is declared using progressi block[i] keys, as in the example here below
# * each block is defined by the name of the class which implements it and an optional block name 
#   (separated by comma). If given, the name must be unique. If not given, a name is calculated on the
#   fly during execution. The name is also to bind a block with its properties.
#
root:
    block0: ChainETL,extract
    block1: ChainETL,transform
    block2: ChainETL,load

# The definition of the *extract* chain. Add blocks here to enrich the ETL chain
extract:
    block0: TestETL

# The definition of the *transform* chain. Add blocks here to enrich the ETL chain
transform:
    block0: TestETL,a_block_name

# The definition of the *load* chain. Add blocks here to enrich the ETL chain    
load:
    block0: TestETL,another_block_name

# This section define configuration options for the block with the matching name.
# Every block can have its own configuration options. 
a_block_name:
    key:    value
    other:  othervalue
